head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2017.07.07.07.16.55;	author laxman29;	state Exp;
branches;
next	1.10;

1.10
date	2017.07.07.07.13.16;	author laxman29;	state Exp;
branches;
next	1.9;

1.9
date	2017.07.07.07.05.42;	author laxman29;	state Exp;
branches;
next	1.8;

1.8
date	2017.07.07.07.01.14;	author laxman29;	state Exp;
branches;
next	1.7;

1.7
date	2017.07.07.07.00.28;	author laxman29;	state Exp;
branches;
next	1.6;

1.6
date	2017.07.07.06.57.57;	author laxman29;	state Exp;
branches;
next	1.5;

1.5
date	2017.07.07.04.16.14;	author laxman29;	state Exp;
branches;
next	1.4;

1.4
date	2017.07.07.04.14.45;	author laxman29;	state Exp;
branches;
next	1.3;

1.3
date	2017.07.06.06.32.40;	author laxman29;	state Exp;
branches;
next	1.2;

1.2
date	2017.07.06.05.33.59;	author laxman29;	state Exp;
branches;
next	1.1;

1.1
date	2017.07.03.17.38.49;	author laxman29;	state Exp;
branches;
next	;


desc
@created a function for the master array to be printed
@


1.11
log
@se
@
text
@#include"header.h"
#include"declaration.h"
char *creatmasterarray(int fd)
{              
      int i,j,l,flag,ret;
      char *ma,ch;
      ma = NULL;         
      printf(" %s:Begin of function\n",__func__);
      flag=i=0;
      while(1)
      {
      	ret=read(fd,&ch,1);			
	if(ret==-1)
	{
		perror("read");
		exit(EXIT_FAILURE);

        }	
				 
	if(ret==0)
	  	 break;
	if(i>0)
		{			 
			for(j=0;j<=i;j++)
	        	{
			  if(*(ma+j)==ch)
			  flag=1;
			  
	       		}
		}	 
		if(flag==0)
		{	
			ma =(char *)realloc(ma,i+1);
			 *(ma+i)=ch;
		  	i++;
		}
	     	else
			flag=0;		
	}
		*(ma+i) = '\0';
		printf("ma:\t");
		
		for(l=0;l<=i;l++)
		printf("%c",*(ma+l));
		printf("\nFile Closed Successfully\n");

return ma;     
}
	 	


@


1.10
log
@se
@
text
@d24 1
a24 1
			for(j=0;j<i;j++)
d28 1
a28 1
			  break;
@


1.9
log
@se
@
text
@d20 1
a20 1
		if(ret==0)
d24 9
a32 9
		for(j=0;j<i;j++)
	        {
		  if(*(ma+j)==ch)
		  flag=1;
		  break;
	       	}
		} 
			if(flag==0)
			{	
d34 2
a35 10

			  *(ma+i)=ch;
			  i++;
			}
	     flag=0;
	
			
		if(ch==10)
		{
		break;
d37 2
d46 2
a47 3
		return ma;
			
     
@


1.8
log
@se.
/
@
text
@d22 2
a23 1
				 
d29 2
a30 1
	       	} 
d33 2
a34 6
			ma =(char*)realloc(ma,i+1);
			if (!ma)
			{
				perror("malloc");
				exit(EXIT_FAILURE);
			}
d39 6
a45 9
			
	if(ch==10)
	{
		ma=(char*)realloc(ma,i+1);
		if (!ma)
			{
				perror("malloc");
				exit(EXIT_FAILURE);
	}		}
@


1.7
log
@*** empty log message ***
@
text
@d23 1
a23 1
		for(j=0;j<=i;j++)
@


1.6
log
@se
@
text
@d23 1
a23 1
		for(j=0;j<i;j++)
d50 1
a50 1
			}
d53 1
a53 1
	}	
@


1.5
log
@se
@
text
@d23 1
a23 1
		for(j=0;j<=i;j++)
@


1.4
log
@changed malloc to realloc so as to save memory
@
text
@d20 1
a20 1
		if(ch==10)
@


1.3
log
@*** empty log message ***
@
text
@d7 26
a32 3
               printf("Begin of function\n");
		ma = (char*)malloc(sizeof (char)*128);
			if(!ma)
a35 1

d37 10
a46 2
			flag=i=0;
			while(1)
d48 2
a49 23
				ret=read(fd,&ch,1);
				
				if(ret==-1)
				 
				 {
				     perror("read");
				     exit(EXIT_FAILURE);

				 }
				 
				if(ret==0)
				  break;
				 
				for(j=0;j<=i;j++)
			        {
				 	if(*(ma+j)==ch)
					flag=1;
				}
				if(flag==0)
				{	*(ma+i)=ch;
					i++;
				}
				flag=0;
d51 7
a57 9
			

			*(ma+i) = '\0';
			printf("ma:\t");
			for(l=0;l<=i;l++)
			    printf("%c",*(ma+l));
	
			printf("\nFile Closed Successfully\n");
			return ma;
d60 1
a60 1
	}
d62 1
a62 1
 
@


1.2
log
@*** empty log message ***
@
text
@a23 1
				     close(fd);
d48 1
a48 1
			close(fd);
@


1.1
log
@Initial revision
@
text
@d43 3
a48 1
			*(ma+i) = '\0';
@
